GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./main...
(gdb) br main
Breakpoint 1 at 0x1216: file main.c, line 17.
(gdb) infor [K[K[K[K[K[Kr
Starting program: /mnt/c/Users/admin/Desktop/gdb_simple_pass_hack/main 

Breakpoint 1, main () at main.c:17
warning: Source file is more recent than executable.
17	int main() {
(gdb) infor [K[K frame
Stack level 0, frame at 0x7ffffffedc30:
 rip = 0x8001216 in main (main.c:17); saved rip = 0x7fffff5d40b3
 source language c.
 Arglist at 0x7ffffffedc20, args: 
 Locals at 0x7ffffffedc20, Previous frame's sp is 0x7ffffffedc30
 Saved registers:
  rip at 0x7ffffffedc28
(gdb) disassemble 
Dump of assembler code for function main:
=> 0x0000000008001216 <+0>:	endbr64 
   0x000000000800121a <+4>:	push   %rbp
   0x000000000800121b <+5>:	mov    %rsp,%rbp
   0x000000000800121e <+8>:	sub    $0x10,%rsp
   0x0000000008001222 <+12>:	movl   $0x0,-0x4(%rbp)
   0x0000000008001229 <+19>:	movl   $0x72657771,-0xb(%rbp)
   0x0000000008001230 <+26>:	movw   $0x7974,-0x7(%rbp)
   0x0000000008001236 <+32>:	movb   $0x0,-0x5(%rbp)
   0x000000000800123a <+36>:	lea    0xdca(%rip),%rdi        # 0x800200b
   0x0000000008001241 <+43>:	mov    $0x0,%eax
   0x0000000008001246 <+48>:	callq  0x80010a0 <printf@plt>
   0x000000000800124b <+53>:	lea    -0xb(%rbp),%rax
   0x000000000800124f <+57>:	mov    %rax,%rdi
   0x0000000008001252 <+60>:	callq  0x80011c9 <pass_check>
   0x0000000008001257 <+65>:	mov    %eax,-0x4(%rbp)
   0x000000000800125a <+68>:	cmpl   $0x0,-0x4(%rbp)
   0x000000000800125e <+72>:	je     0x8001284 <main+110>
   0x0000000008001260 <+74>:	lea    0xdb4(%rip),%rdi        # 0x800201b
   0x0000000008001267 <+81>:	callq  0x8001090 <puts@plt>
   0x000000000800126c <+86>:	lea    0xdbd(%rip),%rdi        # 0x8002030
   0x0000000008001273 <+93>:	callq  0x8001090 <puts@plt>
   0x0000000008001278 <+98>:	mov    $0x1,%edi
   0x000000000800127d <+103>:	callq  0x80010d0 <sleep@plt>
   0x0000000008001282 <+108>:	jmp    0x800126c <main+86>
   0x0000000008001284 <+110>:	lea    0xdbd(%rip),%rdi        # 0x8002048
   0x000000000800128b <+117>:	callq  0x8001090 <puts@plt>
   0x0000000008001290 <+122>:	mov    $0x0,%eax
   0x0000000008001295 <+127>:	leaveq 
   0x0000000008001296 <+128>:	retq   
End of assembler dump.
(gdb) n
19	    int correct = 0;
(gdb) n
20	    char correct_enc_pass[] = "qwerty"; // encrypted key to unlock program
(gdb) n
22	    printf("Input password:");
(gdb) n
23	    correct = pass_check(correct_enc_pass);
(gdb) s
pass_check (correct_enc_pass=0x7ffffffedc07 "") at main.c:5
5	int pass_check(char *correct_enc_pass) {
(gdb) info frame
Stack level 0, frame at 0x7ffffffedc10:
 rip = 0x80011c9 in pass_check (main.c:5); saved rip = 0x8001257
 called by frame at 0x7ffffffedc30
 source language c.
 Arglist at 0x7ffffffedc00, args: correct_enc_pass=0x7ffffffedc07 ""
 Locals at 0x7ffffffedc00, Previous frame's sp is 0x7ffffffedc10
 Saved registers:
  rip at 0x7ffffffedc08
(gdb) disassemble 
Dump of assembler code for function pass_check:
=> 0x00000000080011c9 <+0>:	endbr64 
   0x00000000080011cd <+4>:	push   %rbp
   0x00000000080011ce <+5>:	mov    %rsp,%rbp
   0x00000000080011d1 <+8>:	sub    $0x30,%rsp
   0x00000000080011d5 <+12>:	mov    %rdi,-0x28(%rbp)
   0x00000000080011d9 <+16>:	lea    -0x20(%rbp),%rax
   0x00000000080011dd <+20>:	mov    %rax,%rsi
   0x00000000080011e0 <+23>:	lea    0xe21(%rip),%rdi        # 0x8002008
   0x00000000080011e7 <+30>:	mov    $0x0,%eax
   0x00000000080011ec <+35>:	callq  0x80010c0 <__isoc99_scanf@plt>
   0x00000000080011f1 <+40>:	lea    -0x20(%rbp),%rdx
   0x00000000080011f5 <+44>:	mov    -0x28(%rbp),%rax
   0x00000000080011f9 <+48>:	mov    %rdx,%rsi
   0x00000000080011fc <+51>:	mov    %rax,%rdi
   0x00000000080011ff <+54>:	callq  0x80010b0 <strcmp@plt>
   0x0000000008001204 <+59>:	test   %eax,%eax
   0x0000000008001206 <+61>:	jne    0x800120f <pass_check+70>
   0x0000000008001208 <+63>:	mov    $0x1,%eax
   0x000000000800120d <+68>:	jmp    0x8001214 <pass_check+75>
   0x000000000800120f <+70>:	mov    $0x0,%eax
   0x0000000008001214 <+75>:	leaveq 
   0x0000000008001215 <+76>:	retq   
End of assembler dump.
(gdb) x/80x[Kbx[K[Kx 0x7ffffffedc00
0x7ffffffedc00:	0x00000000	0x00000000	0x08001257	0x00000000
0x7ffffffedc10:	0xfffedd10	0x657771ff	0x00797472	0x00000000
0x7ffffffedc20:	0x00000000	0x00000000	0xff5d40b3	0x00007fff
0x7ffffffedc30:	0xff7dd620	0x00007fff	0xfffedd18	0x00007fff
0x7ffffffedc40:	0x00000000	0x00000001	0x08001216	0x00000000
0x7ffffffedc50:	0x080012a0	0x00000000	0x7406d471	0xa8bf8192
0x7ffffffedc60:	0x080010e0	0x00000000	0xfffedd10	0x00007fff
0x7ffffffedc70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7ffffffedc80:	0xcc66d471	0x57407e6f	0xf4c8d471	0x57407f28
0x7ffffffedc90:	0x00000000	0x00000000	0x00000000	0x00000000
0x7ffffffedca0:	0x00000000	0x00000000	0x00000001	0x00000000
0x7ffffffedcb0:	0xfffedd18	0x00007fff	0xfffedd28	0x00007fff
0x7ffffffedcc0:	0xff7df190	0x00007fff	0x00000000	0x00000000
0x7ffffffedcd0:	0x00000000	0x00000000	0x080010e0	0x00000000
0x7ffffffedce0:	0xfffedd10	0x00007fff	0x00000000	0x00000000
0x7ffffffedcf0:	0x00000000	0x00000000	0x0800110e	0x00000000
0x7ffffffedd00:	0xfffedd08	0x00007fff	0x0000001c	0x00000000
0x7ffffffedd10:	0x00000001	0x00000000	0xfffedf37	0x00007fff
0x7ffffffedd20:	0x00000000	0x00000000	0xfffedf6c	0x00007fff
0x7ffffffedd30:	0xfffedf7c	0x00007fff	0xfffedf93	0x00007fff
(gdb) x/80x 0x7ffffffedc00[C[1@b
0x7ffffffedc00:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedc08:	0x57	0x12	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedc10:	0x10	0xdd	0xfe	0xff	0xff	0x71	0x77	0x65
0x7ffffffedc18:	0x72	0x74	0x79	0x00	0x00	0x00	0x00	0x00
0x7ffffffedc20:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedc28:	0xb3	0x40	0x5d	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedc30:	0x20	0xd6	0x7d	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedc38:	0x18	0xdd	0xfe	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedc40:	0x00	0x00	0x00	0x00	0x01	0x00	0x00	0x00
0x7ffffffedc48:	0x16	0x12	0x00	0x08	0x00	0x00	0x00	0x00
(gdb) x/80bx 0x7ffffffedc00-0x40
0x7ffffffedbc0:	0x40	0x00	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedbc8:	0xf0	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedbd0:	0xc2	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedbd8:	0x07	0xdc	0xfe	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedbe0:	0x06	0xdc	0xfe	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedbe8:	0xed	0x12	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedbf0:	0xe8	0x12	0x7a	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedbf8:	0xa0	0x12	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedc00:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedc08:	0x57	0x12	0x00	0x08	0x00	0x00	0x00	0x00
(gdb) n
8	    scanf("%s", password);
(gdb) n
11	    if (strcmp(correct_enc_pass, password) == 0)
(gdb) nx/80bx 0x7ffffffedc00-0x40
0x7ffffffedbc0:	0x40	0x00	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedbc8:	0xf1	0x11	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedbd0:	0xc2	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7ffffffedbd8:	0x15	0xdc	0xfe	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedbe0:	0x3f	0x3f	0x3f	0x3f	0x3f	0x3f	0x3f	0x00
0x7ffffffedbe8:	0xed	0x12	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedbf0:	0xe8	0x12	0x7a	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedbf8:	0xa0	0x12	0x00	0x08	0x00	0x00	0x00	0x00
0x7ffffffedc00:	0x20	0xdc	0xfe	0xff	0xff	0x7f	0x00	0x00
0x7ffffffedc08:	0x57	0x12	0x00	0x08	0x00	0x00	0x00	0x00
(gdb) c
Continuing.
Input password:Incorrect password. Try again.
[Inferior 1 (process 558) exited normally]
(gdb) quit
